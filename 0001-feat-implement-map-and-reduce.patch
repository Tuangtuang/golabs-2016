From ff80fcd544822320e6765a56d6e0b558b4c063f4 Mon Sep 17 00:00:00 2001
From: Tuangtuang <tyqbest@163.com>
Date: Wed, 15 Sep 2021 18:29:34 -0400
Subject: [PATCH] feat: implement map and reduce

---
 src/main/wc.go | 36 +++++++++++++++++++++++++++++++++++-
 1 file changed, 35 insertions(+), 1 deletion(-)

diff --git a/src/main/wc.go b/src/main/wc.go
index 3846bad..34e54da 100644
--- a/src/main/wc.go
+++ b/src/main/wc.go
@@ -1,6 +1,11 @@
 package main
 
-import "os"
+import (
+	"os"
+	"strconv"
+	"strings"
+	"unicode"
+)
 import "fmt"
 import "mapreduce"
 
@@ -12,12 +17,41 @@ import "container/list"
 // value should be a list of key/value pairs, each represented
 // by a mapreduce.KeyValue.
 func Map(value string) *list.List {
+	// filter illegal characters
+	f := func(c rune) bool {
+		return !unicode.IsLetter(c) && !unicode.IsNumber(c)
+	}
+	// get every word in the string
+	strList := strings.FieldsFunc(value, f)
+	// define result list
+	var resultList list.List
+	// put to map
+	for i := 0; i < len(strList); i++ {
+		// set keyValue pair
+		keyValuePair := mapreduce.KeyValue{
+			strList[i],
+			"1",
+		}
+		// add to result list
+		resultList.PushBack(keyValuePair)
+	}
+	return &resultList
 }
 
 // called once for each key generated by Map, with a list
 // of that key's string value. should return a single
 // output value for that key.
 func Reduce(key string, values *list.List) string {
+	sum := 0
+	// add every count of the key
+	for e := values.Front(); e != nil; e = e.Next() {
+		num, err := strconv.Atoi(e.Value.(string))
+		if err != nil {
+			break
+		}
+		sum += num
+	}
+	return strconv.Itoa(sum)
 }
 
 // Can be run in 3 ways:
-- 
2.28.0

